import os
os.environ["TF_CPP_MIN_LOG_LEVEL"] = "2"

import numpy as np
import cv2
from glob import glob
import tensorflow as tf
from tensorflow.keras.utils import CustomObjectScope
from metrics import dice_loss, dice_coef, iou

from PIL import Image

import serial
import time



def remove_background(image_path):
    H = 512
    W = 512
    """ Seeding """
    np.random.seed(42)
    tf.random.set_seed(42)

    """ Loading model: DeepLabV3+ """
    with CustomObjectScope({'iou': iou, 'dice_coef': dice_coef, 'dice_loss': dice_loss}):
        model = tf.keras.models.load_model("model (1).h5")

    """ Load the image """
    image = cv2.imread(image_path, cv2.IMREAD_COLOR)
    h, w, _ = image.shape
    x = cv2.resize(image, (W, H))
    x = x/255.0
    x = x.astype(np.float32)
    x = np.expand_dims(x, axis=0)

    """ Prediction """
    y = model.predict(x)[0]
    y = cv2.resize(y, (w, h))
    y = np.expand_dims(y, axis=-1)
    y = y > 0.5

    photo_mask = y
    background_mask = np.abs(1-y)

    masked_photo = image * photo_mask
    background_mask = np.concatenate([background_mask, background_mask, background_mask], axis=-1)
    background_mask = background_mask * [0, 0, 255]
    final_photo = masked_photo + background_mask
    cv2.imwrite("output.jpg", final_photo)
    return final_photo



def sketch():
    image_from_func = remove_background("image1.jpg")
    # image = cv2.imread("input.jpg")
    image = image_from_func
    image = np.array(image, dtype=np.uint8)
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray_image, 100, 100)
    cv2.imwrite('Edges.png', edges)
    return edges




def convtogcode():
    image_file = ("Edges.png")
    # image_file = sketch()
    # Load the image and get its dimensions
    image = Image.open(image_file)
    width, height = image.size

    # Set the scaling factor for the G-code coordinates
    scale = 4 / 255.0

    # Set the G-code commands for moving the pen up and down
    pen_up = "M05\n"
    pen_down = "M03 S90\n"
    # "M05"
    # "M03 S90"
    # Set the G-code file name
    gcode_file = "example.gcode"

    # Open the G-code file for writing
    with open(gcode_file, "w") as f:

        # Write the G-code header
        f.write("; Generated by image-to-gcode\n")
        f.write("; Image file: {}\n".format(image_file))
        f.write("; Image size: {}x{}\n".format(width, height))
        f.write("; Scaling factor: {}\n".format(scale))
        f.write("\n")

        # Loop over the image pixels
        for y in range(height):
            for x in range(width):

                # Get the pixel color
                pixel = image.getpixel((x, y))
                pix=[pixel]

                # Calculate the grayscale value
                grayscale = sum(pix) / 3
                #grayscale = sum(list(pixel)) / 3
                #grayscale = (pixel[0] + pixel[1] + pixel[2]) / 3


                # Convert the grayscale value to a G-code X-coordinate
                x_coord = x * scale

                # Convert the grayscale value to a G-code Y-coordinate
                y_coord = (height - y) * scale
                
                x_coord = round(x_coord,2)
                y_coord = round(y_coord,2)

                feed_rate = 100
                temp_x = 0
                temp_y = 0

                # Write the G-code command for moving the pen to the X,Y position
                f.write("G1 X{} Y{} F{}\n".format(x_coord, y_coord, feed_rate))    
                if (x_coord != temp_x) | (y_coord != temp_y):
                    # Write the G-code command for lowering the pen
                    f.write(pen_down)

                    # Write the G-code command for moving the pen up
                    f.write(pen_up)
                temp_x = x_coord
                temp_y = y_coord
            

        # Write the G-code footer
        f.write("; End of G-code file\n")
    return gcode_file

def run_gcode():
    # open the grbl serial port
    p = serial.Serial('COM15', 115200)

    # open the gcode file
    g = open('example.gcode','r')

    # to wake up grbl
    p.write("\r\n\r\n".encode())
    time.sleep(5)  # delays for a given number of seconds for grbl to initialize
    p.flush()   # flush startup text in serial input

    # Send g-code to grbl
    for line in g:
        l = line.strip() # strip all EOL characters for consistency
        print(f"Sending: {l},")
        p.write(f"{l}\n".encode()) # Send g-code block to grbl
        time.sleep(1)
        grbl_reply = p.readline() # Wait for grbl response with carriage return
        print(f"Response: {grbl_reply.strip()}")


    # Wait here until grbl is finished to close serial port and file.
    input("  Press <Enter> to exit and disable grbl.")


    # close g-code file and serial port
    g.close()
    p.close()
    return ("Successful")


sketch()
convtogcode()
# run_gcode()
